HerosPHP框架
一、框架具备的功能
	(1) 目录组织结构 
	(2) 基础核心类
		(a) 模板解析
		(b) 生成静态
		(c) URL解析 。。。。
	(3) MVC模式结构
	(4) 工具扩展类
	(5) 类的自动加载
	(6) 数据的自动验证
	(7) 输入输出处理
	(8) 错误异常的捕获和处理
	(9) 前端开发的一些必备工具包(javascript框架, css框架)  (这些可以没有)
	
二、框架缓存系统
1. 动态缓存，即数据库的动态缓存(局部缓存，如：缓存某个SQL的查询结果), 考虑数据的水平分割.
2. 静态缓存，即生成静态文件。
3. Memcache缓存。
4. APC缓存，即编译缓存
5. http缓存，即浏览器缓存。

三、数据验证 (难点：数据的过滤), 分三步：
	1. 数据类型
	2. 数据的size(规格：长度)
	3. 数据的净化(去除javascript代码，HTML代码，SQL语句。。。。)
	
三、框架的工具类
1. 重写数据库操作类，新增PDO扩展和Mysqli扩展	
	a.总接口 interface IDB.class.php
	b.常规操作数据库 Dmysql.class.php implements IDB   
	c.mysqli扩展类 Dmysqli.class.php implements IDB	
	
2. 文件上传类 upload.class.php

3. 编写图片处理类 image.class.php

4. 验证码类

5. 数据验证类


四、组件的解析 ，插件开发。(暂缓开发)
	(1) sql组件：解析并生成SQL语句
	(2) form组件：解析并生成表单
	(3) ajax组件：解析并生成Ajax代码

五、开发思路
1. 整体构思，系统的访问模式，开发模式，思路整合。

2. 实现URL的path-info 访问模式 , Urlparse.class.php

3. 实现首页, 定义好系统常量，配置好系统的配置文件。 index.php

4. 实现系统框架的统一入口文件 初始化系统的配置全局变量

5. 实现MVC模块的文件布局和功能架构实现
	(a). 实现模板解析	Template.class.php
	(b). 开发控制器的基类	Controller.class.php
6. 进行系统的测试，看看是否可以按照当前访问模式运行
	(a). 能否正常访问和加载所需要的模块
	(b). 能否将所需参数很方便的传入控制器中
7. 完善框架的工具类
	(a). 数据库连接
	(b). 缓存系统
	(c). 数据过滤
	(d). 文件上传
	.....
	.....
8. 完善前台的工具框架
	(a). 常用的js包
	(b). 编写css框架 reset.css
	(c). 常用flash插件(如文件文件的上传)
	
六、本框架的核心思想
	(1) 采用path-info的访问模式，对搜索引擎非常友好
	(2) 系统框架采用统一入口，对安全性验证，URL重写, 加载文件带来极大的便利
	(3) 采用MVC三层结构方式，并且完全采用面向对象的模式编写。核心继承结构为
		article 	extends 	Controller 		extends 	Template
		内容控制器--------+-----基类控制器+--------+-----------模板类----
	所以使用起来非常方便, 每个控制器可以随意调用模板类的所有方法，无需再去实例化模板类
	
	

